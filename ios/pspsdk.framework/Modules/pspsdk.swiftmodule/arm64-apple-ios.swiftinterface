// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name pspsdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CryptoSwift
import DeveloperToolsSupport
import Foundation
import Security
import Swift
import SwiftUI
import UIKit
import URLImage
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import spl
@_Concurrency.MainActor(unsafe) public struct HtmlWebView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(onSuccess: @escaping (pspsdk.BaseResponse) -> Swift.Void, paymentMethod: Swift.String = "", htmlWebViewModel: pspsdk.HtmlWebViewModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6pspsdk11HtmlWebViewV4bodyQrvp", 0) __
}
public struct TrackerTransactionResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SessionManager {
  public static func checkDeviceRegistered(mobile: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  public static func saveIsRegistered(value: Swift.Bool)
  public static func getIsRegistered() -> Swift.Bool?
  public static func getMobilePspsdk() -> Swift.String?
  public static func getAppId() -> Swift.String?
  public static func deleteAllKeychainData()
  public static func getUsername() -> Swift.String?
  public static func getLocale() -> Swift.String
  public static func saveLocale(language: Swift.String)
}
public struct TrackRegistrationRequest : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TrackRegistrationResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct UserDefaultsKeys {
  public init()
  public func setBankKI(_ value: Swift.String)
  public func setPublicKey(_ value: Swift.String)
  public func setTxnId(_ value: Swift.String)
  public func setSessionKey(_ value: Swift.String)
  public func getBankKI() -> Swift.String?
  public func getPublicKey() -> Swift.String?
  public func getTxnId() -> Swift.String?
  public func getSessionKey() -> Swift.String?
}
extension SwiftUI.Color {
  public static let primaryColor: SwiftUI.Color
  public static let disabled_button_text: SwiftUI.Color
  public static let secondaryColor: SwiftUI.Color
  public static let PL_bg: SwiftUI.Color
  public static let PL_pmry: SwiftUI.Color
  public static let disabledButton: SwiftUI.Color
  public static let greyTextColor: SwiftUI.Color
  public static let bluishGreyTextColor: SwiftUI.Color
}
public struct CommonController {
  public init()
  public func setDefaultAccountApi(bic: Swift.String, accountTokenId: Swift.Int64, onSuccess: @escaping (Swift.Bool) -> Swift.Void, onError: @escaping (Swift.Bool) -> Swift.Void)
  public func deleteAccount(accountTokenId: Swift.Int64, onSuccess: @escaping (Swift.Bool) -> Swift.Void, onError: @escaping (Swift.Bool) -> Swift.Void)
  public func getMerchantToken(ki: Swift.String, body: Swift.String, onSuccess: @escaping (Foundation.Data) -> Swift.Void, onError: @escaping (pspsdk.BaseResponse) -> Swift.Void)
  public func getCustomerProfile(body: pspsdk.FetchCustomerProfileRequest, onSuccess: @escaping (pspsdk.FetchCustomerProfileResponse) -> Swift.Void, onError: @escaping (pspsdk.BaseResponse) -> Swift.Void)
  public static func trackTransactionRequest(onSuccess: @escaping (Swift.Bool) -> Swift.Void, onError: @escaping (pspsdk.BaseResponse) -> Swift.Void)
  public static func getBindingStatus(last4: Swift.String, txnID: Swift.String, onSuccess: @escaping (pspsdk.BaseResponse) -> Swift.Void, onError: @escaping (pspsdk.BaseResponse) -> Swift.Void)
}
public class ConfirmationViewModel : Foundation.ObservableObject {
  public init(confirmed: Swift.Bool = false, bankName: Swift.String)
  public func updateBankName(passedValue: Swift.String)
  public func confirmSelection(_ isConfirmed: Swift.Bool)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class DynamicDataPassed : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($accountToken) public var accountToken: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $accountToken: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($remarks) public var remarks: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $remarks: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($intention) public var intention: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $intention: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($orderId) public var orderId: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $orderId: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($merchantName) public var merchantName: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $merchantName: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($amount) public var amount: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $amount: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($withPayment) public var withPayment: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $withPayment: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($bic) public var bic: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $bic: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(accountToken: Swift.String = "", remarks: Swift.String = "", intention: Swift.String = "", orderId: Swift.String = "", merchantName: Swift.String = "", amount: Swift.String = "0", withPayment: Swift.Bool = false)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FetchCustomerProfileRequest : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class RegistrationViewModel : Foundation.ObservableObject {
  public init()
  public func dismissView()
  public func showView(message: Swift.String)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_hasMissingDesignatedInitializers public class KeychainManager {
  public static func savePreference(data: Swift.String, forKey keyName: Swift.String) -> Darwin.OSStatus
  public static func getPreference(forKey keyName: Swift.String) -> Swift.String?
  public static func deletePreference(forKey keyName: Swift.String) -> Darwin.OSStatus
  @objc deinit
}
public class Localization {
  public init()
  public func getString(key: Swift.String) -> Swift.String
  @objc deinit
}
public struct PayerCollectResponse : Swift.Codable {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case transactionID
    case success, bic
    case merchantTxnID
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SecureByTaraWidget : SwiftUI.View {
  public init()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6pspsdk18SecureByTaraWidgetV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct HtmlBankWebView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(onSuccess: @escaping (pspsdk.BaseResponse) -> Swift.Void, webViewTitle: Swift.String = "", paymentMethod: Swift.String = "", isForBinding: Swift.Bool = false, htmlWebViewModel: pspsdk.HtmlWebViewModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6pspsdk15HtmlBankWebViewV4bodyQrvp", 0) __
}
public struct FailedView : SwiftUI.View {
  public init(errorMessage: SwiftUI.Binding<Swift.String>)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6pspsdk10FailedViewV4bodyQrvp", 0) __
}
public enum CardType {
  case visa
  case mastercard
  case americanExpress
  case discover
  case dinnersClub
  case jcb
  case unknown
  public static var allCases: [pspsdk.CardType] {
    get
  }
  public static func == (a: pspsdk.CardType, b: pspsdk.CardType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class OtpScreenModel : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($referenceId) public var referenceId: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $referenceId: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($challengeCode) public var challengeCode: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $challengeCode: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($otpExpiry) public var otpExpiry: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $otpExpiry: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($action) public var action: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $action: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($bic) public var bic: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $bic: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($amount) public var amount: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $amount: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($otp) public var otp: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $otp: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(referenceId: Swift.String, challengeCode: Swift.String, otpExpiry: Swift.String, action: Swift.String, bic: Swift.String, amount: Swift.String)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor(unsafe) public struct OTPView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(otpScreenModel: pspsdk.OtpScreenModel, onSuccess: @escaping ([Swift.String : Any]) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6pspsdk7OTPViewV4bodyQrvp", 0) __
}
public struct BankController {
  public static func trackTransactionAccountDetails(onSuccess: @escaping (pspsdk.TrackAccountDetailsResponse) -> Swift.Void, onError: @escaping (pspsdk.BaseResponse) -> Swift.Void)
  public static func trackTransactionRequest(onSuccess: @escaping (pspsdk.TrackerTransactionResponse) -> Swift.Void, onError: @escaping (pspsdk.BaseResponse) -> Swift.Void)
}
public struct CommonWebView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6pspsdk13CommonWebViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct CardAdditionView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(isFromSof: Swift.Bool = false, bankName: Swift.String, isFromStandalone: Swift.Bool = false, onSuccess: @escaping ([Swift.String : Any]) -> Swift.Void, updateBank: @escaping ([Swift.String : Any]) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func detectCardType(cardNumber: Swift.String) -> pspsdk.CardType
  public typealias Body = @_opaqueReturnTypeOf("$s6pspsdk16CardAdditionViewV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct RegistrationView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(viewModel: pspsdk.RegistrationViewModel, message: Swift.String)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func dismissView()
  public typealias Body = @_opaqueReturnTypeOf("$s6pspsdk16RegistrationViewV4bodyQrvp", 0) __
}
public struct RegistrationController {
  public init()
  public func startRegistration(userName: Swift.String, mobile: Swift.String, appId: Swift.String, locale: Swift.String, onCompletion: @escaping (Swift.Bool) -> Swift.Void)
  public func getAccessToken() -> Swift.String
}
@_Concurrency.MainActor(unsafe) public struct PaymentViewController {
  @_Concurrency.MainActor(unsafe) public init()
  @_Concurrency.MainActor(unsafe) public static let controller: pspsdk.PaymentLibController
  @_Concurrency.MainActor(unsafe) public static var stopCardTrack: Swift.Bool
  @_Concurrency.MainActor(unsafe) public static func stopTrack()
  @_Concurrency.MainActor(unsafe) public func initiateMerchantTranction(transactionMethod: Swift.String, mobile: Swift.String, appId: Swift.String, amount: Swift.String, username: Swift.String, locale: Swift.String, custRefId: Swift.String, accountTokenId: Swift.Int64, bicCode: Swift.String, refId: Swift.String, remarks: Swift.String, subMerchantName: Swift.String, isCardTokenization: Swift.Bool, onSuccess: @escaping (Swift.Bool) -> Swift.Void, onError: @escaping (pspsdk.BaseResponse) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func trackCardPayment(txnId: Swift.String, txnStatus: @escaping (_ success: Swift.Bool, _ message: Swift.String?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func startBankPayment(accountTokenId: Swift.Int64, initPaymentResp: pspsdk.InitPaymentResp, onSuccess: @escaping (Swift.String) -> Swift.Void, onError: @escaping (any Swift.Error) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func getCustomerprofile(onSuccess: @escaping (pspsdk.FetchCustomerProfileResponse?) -> Swift.Void, onError: @escaping (pspsdk.BaseResponse) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func getSOFCount(onCompletion: @escaping (Swift.Int) -> Swift.Void)
}
extension Swift.String {
  public var htmlToAttributedString: Foundation.NSAttributedString? {
    get
  }
}
public struct BindingLoadingView : SwiftUI.View {
  public init(custrefId: Swift.String, bic: SwiftUI.Binding<Swift.String>, email: SwiftUI.Binding<Swift.String>, intention: Swift.String, withPayment: Swift.Bool, amount: Swift.String?, merchantName: Swift.String?, orderId: Swift.String?, remarks: Swift.String?, onComplete: @escaping (pspsdk.DynamicResponse) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6pspsdk18BindingLoadingViewV4bodyQrvp", 0) __
}
public struct InitPaymentResp : Swift.Codable {
  public var paymentID: Swift.String
  public let amount: Swift.Int
  public let currency: Swift.String, status: Swift.String
  public let paymentMethod: Swift.String?, paymentMethodCategory: Swift.String?
  public let referenceID: Swift.String, remarks: Swift.String
  public let websiteLink: Swift.String
  public let createdAt: Swift.String, updatedAt: Swift.String
  public var userName: Swift.String?, mobile: Swift.String?, appId: Swift.String?, locale: Swift.String?
  public let isDiscountAvailable: Swift.Bool?, isSavedCardInputValidationEnabled: Swift.Bool?
  public let promoBanner: Swift.String?, promoText: Swift.String?, iconBanner: Swift.String?
  public let discountedPrice: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@propertyWrapper public struct NilOnFail<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public let wrappedValue: T?
  public init(from decoder: any Swift.Decoder) throws
  public init(_ wrappedValue: T?)
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class DynamicWebViewModel : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($format) public var format: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $format: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($terminationUrl) public var terminationUrl: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $terminationUrl: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($intention) public var intention: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $intention: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($txnId) public var txnId: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $txnId: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($webData) public var webData: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $webData: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($isLoading) public var isLoading: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $isLoading: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($shouldFinishWebView) public var shouldFinishWebView: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $shouldFinishWebView: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($accountTokenId) public var accountTokenId: Swift.Int64 {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $accountTokenId: Combine.Published<Swift.Int64>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($paymentPending) public var paymentPending: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $paymentPending: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($reason) public var reason: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $reason: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($status) public var status: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $status: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct BaseResponse {
  public var status: Swift.Bool
  public var data: Any?
  public var errorMessage: Swift.String?
  public var responseCode: Swift.Int?
}
public struct DynamicWebViewResponse {
  public var status: Swift.Bool
  public var data: Any?
  public var errorMessage: Swift.String?
  public var responseCode: Swift.Int?
  public var accountToken: Swift.Int64?
  public var txnId: Swift.String?
  public var action: Swift.String?
}
public struct DynamicResponse {
  public var status: Swift.Bool
  public var data: Any?
  public var errorMessage: Swift.String?
  public var responseCode: Swift.Int?
  public var accountToken: Swift.Int64?
  public var txnId: Swift.String?
}
@_hasMissingDesignatedInitializers public class FetchCustomerProfileResponse : Swift.Codable {
  public var mappedBankAccounts: [pspsdk.MappedBankAccounts]?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public class MappedBankAccounts : Swift.Codable, Swift.Hashable {
  public var custPSPId: Swift.String?
  public var accessToken: Swift.String?
  public var transactionId: Swift.String?
  public var merchantId: Swift.String?
  public var requestedLocale: Swift.String?
  public var id: Swift.Int?
  public var accountTokenId: Swift.Int64?
  public var accountToken: Swift.String?
  public var maskedAccountNumber: Swift.String?
  public var customerPspId: Swift.String?
  public var isDefault: Swift.Bool?
  public var isDefaultForTransfer: Swift.Bool?
  public var mpinExists: Swift.Bool?
  public var bic: Swift.String?
  public var accountType: Swift.String?
  public var bankName: Swift.String?
  public var cardType: Swift.String?
  public var logo: Swift.String?
  public static func == (lhs: pspsdk.MappedBankAccounts, rhs: pspsdk.MappedBankAccounts) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor(unsafe) public struct DynamicWebViewScreen : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(onCompletion: @escaping (pspsdk.DynamicWebViewResponse) -> Swift.Void, webViewTitle: Swift.String, dynamicWebViewModel: pspsdk.DynamicWebViewModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6pspsdk20DynamicWebViewScreenV4bodyQrvp", 0) __
}
public struct DataModel : Swift.Codable {
  public let infoCapture: Swift.String?
  public let format: Swift.String?
  public let steps: [Swift.String]?
  public let termURL: Swift.String?
  public let params: [pspsdk.ParamModel]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ParamModel : Swift.Codable {
  public let step: Swift.String?
  public let name: Swift.String?
  public let desc: pspsdk.DescModel?
  public let type: Swift.String?
  public let isMasked: Swift.Bool?
  public let minLength: Swift.Int?
  public let maxLength: Swift.Int?
  public let isMandatory: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DescModel : Swift.Codable {
  public let en: Swift.String?
  public let id: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Rule : Swift.Codable {
  public let id: Swift.Int?
  public let bankOrgId: Swift.String?
  public let ruleId: Swift.String?
  public let ruleName: Swift.String?
  public let requiredParams: Swift.String?
  public let status: Swift.String?
  public let crtnTs: Swift.Int64?
  public let crtnUserId: Swift.String?
  public let updtTs: Swift.Int64?
  public let updtUserId: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RequiredParams : Swift.Codable {
  public let params: [pspsdk.Params]
  public let infoCapture: Swift.String?
  public let format: Swift.String?
  public let steps: [Swift.String]
  public let termURL: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Params : Swift.Codable {
  public let step: Swift.String
  public let auth: pspsdk.Auth
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Auth : Swift.Codable {
  public let type: Swift.String
  public let length: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class HtmlWebViewModel : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($htmlContent) public var htmlContent: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $htmlContent: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($action) public var action: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $action: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(htmlContent: Swift.String, action: Swift.String)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct SuccessView : SwiftUI.View {
  public init()
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6pspsdk11SuccessViewV4bodyQrvp", 0) __
}
public struct CardSuccessScreen : SwiftUI.View {
  public init(message: Swift.String, title: Swift.String)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6pspsdk17CardSuccessScreenV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers public class AppConstants {
  public static let shared: pspsdk.AppConstants
  @objc deinit
}
public enum TransactionType : Swift.String {
  case setPin
  case changePin
  case balanceEnquiry
  case financialTxn
  case registerCardAccDetail
  case securePageUrl
  case collect
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CredType : Swift.String {
  case OTP
  case MPIN
  case PIN
  case REGISTER_ACCOUNT
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CredentialSubmissionRequest : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CredentialSubmissionResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CredentialKeysRetrievalPayload : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EncryptionKeyRetrievalResponsePayload : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ResetCredentialFormat : Swift.String {
  case OTP
  case PIN
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class ImageProvider {
  public static func image(named: Swift.String) -> UIKit.UIImage?
  @objc deinit
}
public class PaymentLibController {
  public init()
  public func initRTPSDK(clientId: Swift.String, clientKey: Swift.String, merchantId: Swift.String, merchantName: Swift.String, locale: Swift.String, appId: Swift.String, env: Swift.String, refUrl: Swift.String, pspOrgID: Swift.String)
  public func startCardTokenizationAndPayment(method: Swift.String, initPaymentResp: pspsdk.InitPaymentResp, onCompletion: @escaping (Swift.Bool) -> Swift.Void)
  public func startRegistration(name: Swift.String, mobileNumber: Swift.String) -> Swift.Bool
  public func getPayId() -> Swift.Bool
  public func checkDeviceRegistration(name: Swift.String, mobileNumber: Swift.String) -> Swift.Bool
  @objc deinit
}
public struct GeneralConfirmationDialog : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6pspsdk25GeneralConfirmationDialogV4bodyQrvp", 0) __
}
public struct SnackbarView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6pspsdk12SnackbarViewV4bodyQrvp", 0) __
}
public struct TrackAccountDetailsRequest : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TrackAccountDetailsResponse : Swift.Codable {
  public let transactionID: Swift.String?
  public let success: Swift.Bool?
  public let status: Swift.String?
  public let listOfMappedAccount: [pspsdk.ListOfMappedAccount]?
  public let pending: Swift.Bool?
  public let errorCode: Swift.String?, errorReason: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ListOfMappedAccount : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_Concurrency.MainActor(unsafe) public struct AllBankList : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(bicCodeFromPaymentLibrary: Swift.String?, emailFromPaymentLibrary: Swift.String?, initPaymentResp: pspsdk.InitPaymentResp? = nil, isFromSof: Swift.Bool = false, onSuccess: @escaping ([Swift.String : Any]) -> Swift.Void, isFromStandAlone: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public var bodyOld: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6pspsdk11AllBankListV4bodyQrvp", 0) __
}
public struct PspsdkUtils {
  public static func base64URLtoUTF8(base64URLString: Swift.String) -> Swift.String?
}
@_Concurrency.MainActor(unsafe) public struct PaymentLoadingView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(bic: Swift.String, amount: Swift.String, merchantName: Swift.String, orderId: Swift.String, remarks: Swift.String, accountToken: Swift.Int64, onComplete: @escaping (pspsdk.DynamicResponse) -> Swift.Void, data: pspsdk.DataModel? = nil, showWebView: Swift.Bool = false, alreadyDone: Swift.Bool = false, htmldata: Swift.String = "", hostOrderId: Swift.String)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func initiateMerchantTranction(transactionMethod: Swift.String, mobile: Swift.String, appId: Swift.String, amount: Swift.String, username: Swift.String, locale: Swift.String, custRefId: Swift.String, accountTokenId: Swift.Int64, bicCode: Swift.String, refId: Swift.String, remarks: Swift.String, subMerchantName: Swift.String, isCardTokenization: Swift.Bool)
  public typealias Body = @_opaqueReturnTypeOf("$s6pspsdk18PaymentLoadingViewV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers public class ConfigManager {
  @objc deinit
}
extension pspsdk.PayerCollectResponse.CodingKeys : Swift.Equatable {}
extension pspsdk.PayerCollectResponse.CodingKeys : Swift.Hashable {}
extension pspsdk.PayerCollectResponse.CodingKeys : Swift.RawRepresentable {}
extension pspsdk.CardType : Swift.Equatable {}
extension pspsdk.CardType : Swift.Hashable {}
extension pspsdk.TransactionType : Swift.Equatable {}
extension pspsdk.TransactionType : Swift.Hashable {}
extension pspsdk.TransactionType : Swift.RawRepresentable {}
extension pspsdk.CredType : Swift.Equatable {}
extension pspsdk.CredType : Swift.Hashable {}
extension pspsdk.CredType : Swift.RawRepresentable {}
extension pspsdk.ResetCredentialFormat : Swift.Equatable {}
extension pspsdk.ResetCredentialFormat : Swift.Hashable {}
extension pspsdk.ResetCredentialFormat : Swift.RawRepresentable {}
