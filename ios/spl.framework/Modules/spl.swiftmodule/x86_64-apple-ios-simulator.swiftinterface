// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name spl
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CryptoKit
import CryptoSwift
import Foundation
import Security
import Swift
import SwiftUI
import SwiftyRSA
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct WebUrlRequest : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct WebUrlResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CommonRequest : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class AppConstantSPL {
  public static let shared: spl.AppConstantSPL
  public init()
  public var serverURL: Swift.String
  public var merchantKey: Swift.String
  public var merchantKI: Swift.String
  public var appId: Swift.String
  public var pspOrgId: Swift.String
  public var refUrl: Swift.String?
  public var locale: Swift.String
  public var merchantID: Swift.String
  @objc deinit
}
public enum TransactionType : Swift.String {
  case setPin
  case changePin
  case balanceEnquiry
  case financialTxn
  case registerCardAccDetail
  case securePageUrl
  case collect
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CredType : Swift.String {
  case OTP
  case MPIN
  case PIN
  case REGISTER_ACCOUNT
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CredentialSubmissionRequest : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CredentialSubmissionResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CredentialKeysRetrievalPayload : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PaymentInstrument : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CredentialSubmissionPayload : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AuthorizePINCred : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SplUtils {
  public static func getDeviceIdentifier() -> Swift.String?
  public static func getCurrentTimeInMillis() -> Swift.Int64
  public static func getCheckDeviceRegistered(mobile: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers open class RSAUtils : ObjectiveC.NSObject {
  public static func encryptWithRSAKey(_ data: Foundation.Data, rsaKeyRef: Security.SecKey, padding: Security.SecPadding) -> Foundation.Data?
  public static func decryptWithRSAKey(_ encryptedData: Foundation.Data, rsaKeyRef: Security.SecKey, padding: Security.SecPadding) -> Foundation.Data?
  public static func deleteRSAKeyFromKeychain(_ tagName: Swift.String)
  public static func getRSAKeyFromKeychain(_ tagName: Swift.String) -> Security.SecKey?
  public static func addRSAPrivateKey(_ privkeyBase64: Swift.String, tagName: Swift.String) -> Security.SecKey?
  public static func addRSAPublicKey(_ pubkeyBase64: Swift.String, tagName: Swift.String) -> Security.SecKey?
  public static func encryptWithRSAPrivateKey(_ data: Foundation.Data, privkeyBase64: Swift.String, keychainTag: Swift.String) -> Foundation.Data?
  public static func encryptWithRSAPublicKey(_ data: Foundation.Data, pubkeyBase64: Swift.String, keychainTag: Swift.String) -> Foundation.Data?
  public static func decryptWithRSAPrivateKey(_ encryptedData: Foundation.Data, privkeyBase64: Swift.String, keychainTag: Swift.String) -> Foundation.Data?
  public static func decryptWithRSAPublicKey(_ encryptedData: Foundation.Data, pubkeyBase64: Swift.String, keychainTag: Swift.String) -> Foundation.Data?
  @objc override dynamic public init()
  @objc deinit
}
public struct CommonResponse : Swift.Codable {
  public let reqMsgID: Swift.String?, symmetricKey: Swift.String?, errorCode: Swift.String?, errorReason: Swift.String?
  public let success: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum DecryptionError : Swift.Error {
  case invalidKey
  case paddingNotSupported
  case decryptionFailed
  public static func == (a: spl.DecryptionError, b: spl.DecryptionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct DeviceRegistrationController {
  public init()
  public func startDeviceRegistration(success: Swift.Bool, sessionKey: Swift.String, mobileNumber: Swift.String, txnID: Swift.String, appId: Swift.String, onSuccess: @escaping (Swift.String) -> Swift.Void, onError: @escaping (any Swift.Error) -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class KeychainManager {
  public static func savePreference(data: Swift.String, forKey keyName: Swift.String) -> Darwin.OSStatus
  public static func getPreference(forKey keyName: Swift.String) -> Swift.String?
  public static func deletePreference(forKey keyName: Swift.String) -> Darwin.OSStatus
  @objc deinit
}
public struct EncryptionValidateOtpRetrievalRequest : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EncryptionValidateOtpRetrievalResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RegisterCardDetailRequest : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RegisterCardDetailResponse : Swift.Codable {
  public let commonResponse: spl.CommonResponse
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RegisterAccountDetailsPayload : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AccountInfo : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RegisterAccountDetails : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class PKIEncryptionDecryptionUtils : ObjectiveC.NSObject {
  public func encryptBase64(plainText: Swift.String, key: Swift.String) -> Swift.String
  public func encryptUTF8(plainText: Swift.String, key: Swift.String) -> Swift.String
  public func decryptWithPublicKey(text: Swift.String, key: Swift.String) -> Swift.String?
  public func generateAES256Base64Key() -> Swift.String?
  public func dataToString(_ data: Foundation.Data) -> Swift.String?
  public func stringToData(_ string: Swift.String) -> Foundation.Data?
  public func base64URLEncode(data: Foundation.Data) -> Swift.String
  public func base64URLDecode(base64URLString: Swift.String) -> Foundation.Data?
  public func decryptAES256CTR(data: Foundation.Data, key: Foundation.Data) throws -> Swift.String?
  public func convertToBase64UrlFormat(_ input: Swift.String) -> Swift.String
  public func convertToBase64Format(_ input: Swift.String) -> Swift.String
  public func encryptAES256CTR(plaintext: Swift.String, key: Swift.String) throws -> Foundation.Data?
  @objc override dynamic public init()
  @objc deinit
}
public struct SessionManager {
  public static func getIsRegistered() -> Swift.Bool?
  public static func getMobileSpl() -> Swift.String?
}
public struct ValidateCardNumRequest : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ValidateCardNumResponse : Swift.Codable {
  public let commonResponse: spl.CommonResponse
  public let bankNameMatchStatus: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ApiServiceError : Swift.Error {
  case invalidURL
  case emptyResponseData
  case networkError(Swift.String)
  case decodingError(any Swift.Error)
}
public class SplApiService {
  public static let shared: spl.SplApiService
  public init()
  public func validateCardNumAsync(sessionKey: Swift.String, bankKi: Swift.String, publicKey: Swift.String, txnId: Swift.String, cardNumber: Swift.String, bic: Swift.String, bankName: Swift.String, success: @escaping (spl.ValidateCardNumResponse) -> Swift.Void, failure: @escaping (any Swift.Error) -> Swift.Void)
  public func webUrlRequestAsync(transactionType: Swift.String, txnId: Swift.String, paymentInstrumentType: Swift.String, bic: Swift.String, sessionKey: Swift.String, success: @escaping (Swift.String) -> Swift.Void, failure: @escaping (any Swift.Error) -> Swift.Void)
  public func registerCardDetailRequest(txnId: Swift.String, transactionType: Swift.String, bic: Swift.String, accountNo: Swift.String?, bankKi: Swift.String, sessionKey: Swift.String, cardNumber: Swift.String, expiryMonth: Swift.String, expiryYear: Swift.String, cvv: Swift.String, publicKey: Swift.String, success: @escaping (_ success: Swift.Bool, _ message: Swift.String) -> Swift.Void, failure: @escaping (any Swift.Error) -> Swift.Void)
  public func createRetrieveKeysRequest(msgID: Swift.String, transactionType: Swift.String, txnId: Swift.String, bic: Swift.String, paymentInstrumentType: Swift.String, success: @escaping (_ bankKi: Swift.String, _ sessionKey: Swift.String, _ PublicKey: Swift.String, _ txnid: Swift.String, _ rule: Swift.String) -> Swift.Void, failure: @escaping (any Swift.Error) -> Swift.Void)
  public func createCredentialSubmissionRequest(txnId: Swift.String, transactionType: Swift.String, credType: Swift.String, credValue: Swift.String, bankKi: Swift.String, publicKey: Swift.String, sessionKey: Swift.String, success: @escaping (Swift.Bool) -> Swift.Void, failure: @escaping (Swift.Bool) -> Swift.Void)
  public func createFetchOtpChallengeRequest(transactionType: Swift.String, txnId: Swift.String, paymentInstrumentType: Swift.String, bic: Swift.String, sessionKey: Swift.String, action: Swift.String?, success: @escaping (_ referenceId: Swift.String, _ otpChallengeCode: Swift.String, _ otpExpiry: Swift.String, _ action: Swift.String) -> Swift.Void, failure: @escaping (_ errorCode: Swift.String?, _ errorReason: Swift.String?) -> Swift.Void)
  public func checkOtpStatus(txnId: Swift.String, status: @escaping (Swift.String) -> Swift.Void)
  public func createValidateOtpRequest(txnId: Swift.String, transactionType: Swift.String, credValue: Swift.String, bankKi: Swift.String, publicKey: Swift.String, sessionKey: Swift.String, action: Swift.String, bic: Swift.String, referenceid: Swift.String, success: @escaping (Swift.Bool) -> Swift.Void, failure: @escaping (_ errorCode: Swift.String?, _ errorReason: Swift.String?) -> Swift.Void)
  @objc deinit
}
public struct EncryptionKeyRetrievalRequest : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EncryptionKeyRetrievalResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EncryptionOtpFetchRetrievalRequest : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EncryptionFetchOtpRetrievalResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension spl.TransactionType : Swift.Equatable {}
extension spl.TransactionType : Swift.Hashable {}
extension spl.TransactionType : Swift.RawRepresentable {}
extension spl.CredType : Swift.Equatable {}
extension spl.CredType : Swift.Hashable {}
extension spl.CredType : Swift.RawRepresentable {}
extension spl.DecryptionError : Swift.Equatable {}
extension spl.DecryptionError : Swift.Hashable {}
