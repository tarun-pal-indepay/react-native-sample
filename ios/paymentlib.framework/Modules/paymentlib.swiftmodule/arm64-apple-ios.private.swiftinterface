// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name paymentlib
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import Combine
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import UIKit
import URLImage
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import pspsdk
import spl
public struct CommonWebView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10paymentlib13CommonWebViewV4bodyQrvp", 0) __
}
public class HtmlWebViewModel : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($htmlContent) public var htmlContent: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $htmlContent: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(htmlContent: Swift.String)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public class PaymentLib {
  public init()
  public func performSDKAction()
  public func initIndepaySDK(clientId: Swift.String, clientKey: Swift.String, merchantId: Swift.String, merchantName: Swift.String, locale: Swift.String, appId: Swift.String, env: Swift.String, merchantLogoUrl: Swift.String)
  public func manageSof(email: Swift.String, firstName: Swift.String, lastName: Swift.String, mobileNumber: Swift.String, onResult: @escaping ([Swift.String : Any]) -> Swift.Void)
  public func getPayId(email: Swift.String?, firstName: Swift.String?, lastName: Swift.String?, mobileNumber: Swift.String?, onResult: @escaping ([Swift.String : Any]) -> Swift.Void)
  public func getPayId_V2(email: Swift.String?, firstName: Swift.String?, lastName: Swift.String?, mobileNumber: Swift.String?, onResult: @escaping ([Swift.String : Any]) -> Swift.Void)
  public func getBankAccounts(email: Swift.String, firstName: Swift.String, lastName: Swift.String, mobileNumber: Swift.String, onResult: @escaping ([Swift.String : Any]) -> Swift.Void)
  public func getPrimaryBankAccounts(email: Swift.String, firstName: Swift.String, lastName: Swift.String, mobileNumber: Swift.String, onResult: @escaping ([Swift.String : Any]) -> Swift.Void)
  public func startBankRegistration(email: Swift.String, firstName: Swift.String, lastName: Swift.String, mobileNumber: Swift.String, onResult: @escaping ([Swift.String : Any]) -> Swift.Void)
  public func startDynamicPayment(email: Swift.String, bic: Swift.String, accountToken: Swift.Int64, firstName: Swift.String, lastName: Swift.String, mobileNumber: Swift.String, amount: Swift.String, merchantName: Swift.String, orderId: Swift.String, remarks: Swift.String, onResult: @escaping ([Swift.String : Any]) -> Swift.Void)
  public func startDynamicBankBinding(withpayment: Swift.Bool, bic: Swift.String, email: Swift.String, firstName: Swift.String, lastName: Swift.String, mobileNumber: Swift.String, amount: Swift.String, merchantName: Swift.String, orderId: Swift.String, remarks: Swift.String, onResult: @escaping ([Swift.String : Any]) -> Swift.Void)
  public func startBindingUsingCard(email: Swift.String, firstName: Swift.String, lastName: Swift.String, mobileNumber: Swift.String, onResult: @escaping ([Swift.String : Any]) -> Swift.Void)
  public func startPayment(amount: Swift.Int, deeplinkCallback: Swift.String, referenceId: Swift.String, directPaymentType: Swift.String?, remarks: Swift.String, email: Swift.String, firstName: Swift.String, lastName: Swift.String, mobileNumber: Swift.String, onResult: @escaping ([Swift.String : Any]) -> Swift.Void)
  public func startCollect(url: Foundation.URL, onResult: @escaping ([Swift.String : Any]) -> Swift.Void)
  public func openManageRewardScreen(mobileNumberWithCountryCode: Swift.String)
  @objc deinit
}
public struct FailedScreen : SwiftUI.View {
  public init(errorMessage: SwiftUI.Binding<Swift.String>)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10paymentlib12FailedScreenV4bodyQrvp", 0) __
}
@propertyWrapper public struct NilOnFail<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public let wrappedValue: T?
  public init(from decoder: any Swift.Decoder) throws
  public init(_ wrappedValue: T?)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct isForDynamic : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_Concurrency.MainActor(unsafe) public struct PaymentLibraryView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10paymentlib18PaymentLibraryViewV4bodyQrvp", 0) __
}
extension Swift.String {
  public var htmlToAttributedString: Foundation.NSAttributedString? {
    get
  }
}
@_Concurrency.MainActor(unsafe) public struct PaymentScreen : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10paymentlib13PaymentScreenV4bodyQrvp", 0) __
}
public func showSnackbar(message: Swift.String)
public struct SOFInterface {
  public func getPayid(withBankRegistration: Swift.Bool, mobile: Swift.String) -> Swift.String
  public func setPrimary(bic: Swift.String, tokenId: Swift.Int64) -> Swift.Bool
  public func deleteToken(tokenId: Swift.Int64) -> Swift.Bool
  public func fetchCustomerProfile() -> pspsdk.FetchCustomerProfileResponse
  public func fetchPrimaryToken() -> pspsdk.MappedBankAccounts
}
public struct SOFView : SwiftUI.View {
  @SwiftUI.State @_projectedValueProperty($custProfileResp) public var custProfileResp: pspsdk.FetchCustomerProfileResponse? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  public var $custProfileResp: SwiftUI.Binding<pspsdk.FetchCustomerProfileResponse?> {
    get
  }
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10paymentlib7SOFViewV4bodyQrvp", 0) __
}
public struct ProcessingPaymentView : SwiftUI.View {
  public init(paymentId: Swift.String, clientId: Swift.String? = nil, onSuccess: @escaping (Swift.String, Swift.String) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10paymentlib21ProcessingPaymentViewV4bodyQrvp", 0) __
}
public class DeepLinkHandler : Foundation.ObservableObject {
  public init(isLoading: Swift.Bool = false)
  public func handleDeepLink(_ url: Foundation.URL)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct DeepLinkView : SwiftUI.View {
  public init(paymentId: Swift.String?)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10paymentlib12DeepLinkViewV4bodyQrvp", 0) __
}
public struct OnBoardingData {
}
@_hasMissingDesignatedInitializers public class ConfigManager {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VersionChecker {
  public static func checkiOSVersion() -> Swift.Bool
  @objc deinit
}
public class Provider {
  public init()
  public func getRewardCounts(phoneNumber: Swift.String, completion: @escaping (Swift.Int) -> Swift.Void)
  @objc deinit
}
public struct BaseResponse {
}
public struct SuccessScreen : SwiftUI.View {
  public init(statusData: SwiftUI.Binding<paymentlib.PaymentStatusResponse?>)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10paymentlib13SuccessScreenV4bodyQrvp", 0) __
}
@_Concurrency.MainActor(unsafe) public struct HangUpScreen : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  @_Concurrency.MainActor(unsafe) public func getStatus()
  @_Concurrency.MainActor(unsafe) public func startPaymentforSavedMethods()
  public struct viewForVA : SwiftUI.View {
    @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
      get
    }
    public typealias Body = @_opaqueReturnTypeOf("$s10paymentlib12HangUpScreenV9viewForVAV4bodyQrvp", 0) __
  }
  @_Concurrency.MainActor(unsafe) public var navigationProcess: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10paymentlib12HangUpScreenV4bodyQrvp", 0) __
}
public struct CircularProgressView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10paymentlib20CircularProgressViewV4bodyQrvp", 0) __
}
public struct TimerView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10paymentlib9TimerViewV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers public class ImageProvider {
  public static func image(named: Swift.String) -> UIKit.UIImage?
  @objc deinit
}
public struct SnackbarView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10paymentlib12SnackbarViewV4bodyQrvp", 0) __
}
public struct PaymentStatusResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DataClassPaymentStatus : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SwiftUI.Color {
  public static let PL_background: SwiftUI.Color
  public static let PL_primary: SwiftUI.Color
  public static let disabledButton: SwiftUI.Color
  public static let disabled_button_text: SwiftUI.Color
  public static let greyTextColor: SwiftUI.Color
  public static let bluishGreyTextColor: SwiftUI.Color
  public static let greyBackgroundPaymentScreen: SwiftUI.Color
  public static let borderColor: SwiftUI.Color
  public static let PL_gray: SwiftUI.Color
  public static let PL_payment_category: SwiftUI.Color
  public static let transparentReward: SwiftUI.Color
  public static let PL_gray_sub_header: SwiftUI.Color
  public static let PL_bluish_gray_header: SwiftUI.Color
}
